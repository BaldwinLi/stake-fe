/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ETH_PID"
      | "RCC"
      | "UPGRADE_INTERFACE_VERSION"
      | "UPGRADE_ROLE"
      | "addPool"
      | "claim"
      | "claimPaused"
      | "deposit"
      | "depositETH"
      | "endBlock"
      | "getMultiplier"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "massUpdatePools"
      | "pauseClaim"
      | "pauseWithdraw"
      | "paused"
      | "pendingRCC"
      | "pendingRCCByBlockNumber"
      | "pool"
      | "poolLength"
      | "proxiableUUID"
      | "rccPerBlock"
      | "renounceRole"
      | "revokeRole"
      | "setEndBlock"
      | "setPoolWeight"
      | "setRCC"
      | "setRCCPerBlock"
      | "setStartBlock"
      | "stakingBalance"
      | "startBlock"
      | "supportsInterface"
      | "totalPoolWeight"
      | "unpauseClaim"
      | "unpauseWithdraw"
      | "unstake"
      | "updatePool(uint256)"
      | "updatePool(uint256,uint256,uint256)"
      | "upgradeToAndCall"
      | "user"
      | "withdraw"
      | "withdrawAmount"
      | "withdrawPaused"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddPool"
      | "Claim"
      | "Deposit"
      | "Initialized"
      | "PauseClaim"
      | "PauseWithdraw"
      | "Paused"
      | "RequestUnstake"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetEndBlock"
      | "SetPoolWeight"
      | "SetRCC"
      | "SetRCCPerBlock"
      | "SetStartBlock"
      | "UnpauseClaim"
      | "UnpauseWithdraw"
      | "Unpaused"
      | "UpdatePool"
      | "UpdatePoolInfo"
      | "Upgraded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETH_PID", values?: undefined): string;
  encodeFunctionData(functionFragment: "RCC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRCC",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRCCByBlockNumber",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pool", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rccPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolWeight",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRCC", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setRCCPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingBalance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoolWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "user",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETH_PID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RCC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRCC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRCCByBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rccPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRCC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRCCPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePool(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePool(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPaused",
    data: BytesLike
  ): Result;
}

export namespace AddPoolEvent {
  export type InputTuple = [
    stTokenAddress: AddressLike,
    poolWeight: BigNumberish,
    lastRewardBlock: BigNumberish,
    minDepositAmount: BigNumberish,
    unstakeLockedBlocks: BigNumberish
  ];
  export type OutputTuple = [
    stTokenAddress: string,
    poolWeight: bigint,
    lastRewardBlock: bigint,
    minDepositAmount: bigint,
    unstakeLockedBlocks: bigint
  ];
  export interface OutputObject {
    stTokenAddress: string;
    poolWeight: bigint;
    lastRewardBlock: bigint;
    minDepositAmount: bigint;
    unstakeLockedBlocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    rccReward: BigNumberish
  ];
  export type OutputTuple = [user: string, poolId: bigint, rccReward: bigint];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    rccReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, poolId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseClaimEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseWithdrawEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestUnstakeEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, poolId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetEndBlockEvent {
  export type InputTuple = [endBlock: BigNumberish];
  export type OutputTuple = [endBlock: bigint];
  export interface OutputObject {
    endBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolWeightEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    poolWeight: BigNumberish,
    totalPoolWeight: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    poolWeight: bigint,
    totalPoolWeight: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    poolWeight: bigint;
    totalPoolWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRCCEvent {
  export type InputTuple = [RCC: AddressLike];
  export type OutputTuple = [RCC: string];
  export interface OutputObject {
    RCC: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRCCPerBlockEvent {
  export type InputTuple = [rccPerBlock: BigNumberish];
  export type OutputTuple = [rccPerBlock: bigint];
  export interface OutputObject {
    rccPerBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetStartBlockEvent {
  export type InputTuple = [startBlock: BigNumberish];
  export type OutputTuple = [startBlock: bigint];
  export interface OutputObject {
    startBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseClaimEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseWithdrawEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePoolEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    lastRewardBlock: BigNumberish,
    totalRCC: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    lastRewardBlock: bigint,
    totalRCC: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    lastRewardBlock: bigint;
    totalRCC: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePoolInfoEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    minDepositAmount: BigNumberish,
    unstakeLockedBlocks: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    minDepositAmount: bigint,
    unstakeLockedBlocks: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    minDepositAmount: bigint;
    unstakeLockedBlocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    amount: BigNumberish,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    poolId: bigint,
    amount: bigint,
    blockNumber: bigint
  ];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    amount: bigint;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakeContract extends BaseContract {
  connect(runner?: ContractRunner | null): StakeContract;
  waitForDeployment(): Promise<this>;

  interface: StakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ETH_PID: TypedContractMethod<[], [bigint], "view">;

  RCC: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  UPGRADE_ROLE: TypedContractMethod<[], [string], "view">;

  addPool: TypedContractMethod<
    [
      _stTokenAddress: AddressLike,
      _poolWeight: BigNumberish,
      _minDepositAmount: BigNumberish,
      _unstakeLockedBlocks: BigNumberish,
      _withUpdate: boolean
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  claimPaused: TypedContractMethod<[], [boolean], "view">;

  deposit: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<[], [void], "payable">;

  endBlock: TypedContractMethod<[], [bigint], "view">;

  getMultiplier: TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _RCC: AddressLike,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _rccPerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  massUpdatePools: TypedContractMethod<[], [void], "nonpayable">;

  pauseClaim: TypedContractMethod<[], [void], "nonpayable">;

  pauseWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingRCC: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  pendingRCCByBlockNumber: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  pool: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        stTokenAddress: string;
        poolWeight: bigint;
        lastRewardBlock: bigint;
        accRCCPerST: bigint;
        stTokenAmount: bigint;
        minDepositAmount: bigint;
        unstakeLockedBlocks: bigint;
      }
    ],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rccPerBlock: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setEndBlock: TypedContractMethod<
    [_endBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolWeight: TypedContractMethod<
    [_pid: BigNumberish, _poolWeight: BigNumberish, _withUpdate: boolean],
    [void],
    "nonpayable"
  >;

  setRCC: TypedContractMethod<[_RCC: AddressLike], [void], "nonpayable">;

  setRCCPerBlock: TypedContractMethod<
    [_rccPerBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStartBlock: TypedContractMethod<
    [_startBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakingBalance: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  startBlock: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalPoolWeight: TypedContractMethod<[], [bigint], "view">;

  unpauseClaim: TypedContractMethod<[], [void], "nonpayable">;

  unpauseWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updatePool(uint256)": TypedContractMethod<
    [_pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updatePool(uint256,uint256,uint256)": TypedContractMethod<
    [
      _pid: BigNumberish,
      _minDepositAmount: BigNumberish,
      _unstakeLockedBlocks: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  user: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stAmount: bigint;
        finishedRCC: bigint;
        pendingRCC: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  withdrawAmount: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint] & {
        requestAmount: bigint;
        pendingWithdrawAmount: bigint;
      }
    ],
    "view"
  >;

  withdrawPaused: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETH_PID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RCC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addPool"
  ): TypedContractMethod<
    [
      _stTokenAddress: AddressLike,
      _poolWeight: BigNumberish,
      _minDepositAmount: BigNumberish,
      _unstakeLockedBlocks: BigNumberish,
      _withUpdate: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "endBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMultiplier"
  ): TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _RCC: AddressLike,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _rccPerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "massUpdatePools"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingRCC"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingRCCByBlockNumber"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        stTokenAddress: string;
        poolWeight: bigint;
        lastRewardBlock: bigint;
        accRCCPerST: bigint;
        stTokenAmount: bigint;
        minDepositAmount: bigint;
        unstakeLockedBlocks: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rccPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEndBlock"
  ): TypedContractMethod<[_endBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolWeight"
  ): TypedContractMethod<
    [_pid: BigNumberish, _poolWeight: BigNumberish, _withUpdate: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRCC"
  ): TypedContractMethod<[_RCC: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRCCPerBlock"
  ): TypedContractMethod<[_rccPerBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStartBlock"
  ): TypedContractMethod<[_startBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingBalance"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "startBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPoolWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpauseClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpauseWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePool(uint256)"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePool(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _minDepositAmount: BigNumberish,
      _unstakeLockedBlocks: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "user"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stAmount: bigint;
        finishedRCC: bigint;
        pendingRCC: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAmount"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint] & {
        requestAmount: bigint;
        pendingWithdrawAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPaused"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AddPool"
  ): TypedContractEvent<
    AddPoolEvent.InputTuple,
    AddPoolEvent.OutputTuple,
    AddPoolEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PauseClaim"
  ): TypedContractEvent<
    PauseClaimEvent.InputTuple,
    PauseClaimEvent.OutputTuple,
    PauseClaimEvent.OutputObject
  >;
  getEvent(
    key: "PauseWithdraw"
  ): TypedContractEvent<
    PauseWithdrawEvent.InputTuple,
    PauseWithdrawEvent.OutputTuple,
    PauseWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RequestUnstake"
  ): TypedContractEvent<
    RequestUnstakeEvent.InputTuple,
    RequestUnstakeEvent.OutputTuple,
    RequestUnstakeEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetEndBlock"
  ): TypedContractEvent<
    SetEndBlockEvent.InputTuple,
    SetEndBlockEvent.OutputTuple,
    SetEndBlockEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolWeight"
  ): TypedContractEvent<
    SetPoolWeightEvent.InputTuple,
    SetPoolWeightEvent.OutputTuple,
    SetPoolWeightEvent.OutputObject
  >;
  getEvent(
    key: "SetRCC"
  ): TypedContractEvent<
    SetRCCEvent.InputTuple,
    SetRCCEvent.OutputTuple,
    SetRCCEvent.OutputObject
  >;
  getEvent(
    key: "SetRCCPerBlock"
  ): TypedContractEvent<
    SetRCCPerBlockEvent.InputTuple,
    SetRCCPerBlockEvent.OutputTuple,
    SetRCCPerBlockEvent.OutputObject
  >;
  getEvent(
    key: "SetStartBlock"
  ): TypedContractEvent<
    SetStartBlockEvent.InputTuple,
    SetStartBlockEvent.OutputTuple,
    SetStartBlockEvent.OutputObject
  >;
  getEvent(
    key: "UnpauseClaim"
  ): TypedContractEvent<
    UnpauseClaimEvent.InputTuple,
    UnpauseClaimEvent.OutputTuple,
    UnpauseClaimEvent.OutputObject
  >;
  getEvent(
    key: "UnpauseWithdraw"
  ): TypedContractEvent<
    UnpauseWithdrawEvent.InputTuple,
    UnpauseWithdrawEvent.OutputTuple,
    UnpauseWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePool"
  ): TypedContractEvent<
    UpdatePoolEvent.InputTuple,
    UpdatePoolEvent.OutputTuple,
    UpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePoolInfo"
  ): TypedContractEvent<
    UpdatePoolInfoEvent.InputTuple,
    UpdatePoolInfoEvent.OutputTuple,
    UpdatePoolInfoEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AddPool(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;
    AddPool: TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;

    "Claim(address,uint256,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PauseClaim()": TypedContractEvent<
      PauseClaimEvent.InputTuple,
      PauseClaimEvent.OutputTuple,
      PauseClaimEvent.OutputObject
    >;
    PauseClaim: TypedContractEvent<
      PauseClaimEvent.InputTuple,
      PauseClaimEvent.OutputTuple,
      PauseClaimEvent.OutputObject
    >;

    "PauseWithdraw()": TypedContractEvent<
      PauseWithdrawEvent.InputTuple,
      PauseWithdrawEvent.OutputTuple,
      PauseWithdrawEvent.OutputObject
    >;
    PauseWithdraw: TypedContractEvent<
      PauseWithdrawEvent.InputTuple,
      PauseWithdrawEvent.OutputTuple,
      PauseWithdrawEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RequestUnstake(address,uint256,uint256)": TypedContractEvent<
      RequestUnstakeEvent.InputTuple,
      RequestUnstakeEvent.OutputTuple,
      RequestUnstakeEvent.OutputObject
    >;
    RequestUnstake: TypedContractEvent<
      RequestUnstakeEvent.InputTuple,
      RequestUnstakeEvent.OutputTuple,
      RequestUnstakeEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetEndBlock(uint256)": TypedContractEvent<
      SetEndBlockEvent.InputTuple,
      SetEndBlockEvent.OutputTuple,
      SetEndBlockEvent.OutputObject
    >;
    SetEndBlock: TypedContractEvent<
      SetEndBlockEvent.InputTuple,
      SetEndBlockEvent.OutputTuple,
      SetEndBlockEvent.OutputObject
    >;

    "SetPoolWeight(uint256,uint256,uint256)": TypedContractEvent<
      SetPoolWeightEvent.InputTuple,
      SetPoolWeightEvent.OutputTuple,
      SetPoolWeightEvent.OutputObject
    >;
    SetPoolWeight: TypedContractEvent<
      SetPoolWeightEvent.InputTuple,
      SetPoolWeightEvent.OutputTuple,
      SetPoolWeightEvent.OutputObject
    >;

    "SetRCC(address)": TypedContractEvent<
      SetRCCEvent.InputTuple,
      SetRCCEvent.OutputTuple,
      SetRCCEvent.OutputObject
    >;
    SetRCC: TypedContractEvent<
      SetRCCEvent.InputTuple,
      SetRCCEvent.OutputTuple,
      SetRCCEvent.OutputObject
    >;

    "SetRCCPerBlock(uint256)": TypedContractEvent<
      SetRCCPerBlockEvent.InputTuple,
      SetRCCPerBlockEvent.OutputTuple,
      SetRCCPerBlockEvent.OutputObject
    >;
    SetRCCPerBlock: TypedContractEvent<
      SetRCCPerBlockEvent.InputTuple,
      SetRCCPerBlockEvent.OutputTuple,
      SetRCCPerBlockEvent.OutputObject
    >;

    "SetStartBlock(uint256)": TypedContractEvent<
      SetStartBlockEvent.InputTuple,
      SetStartBlockEvent.OutputTuple,
      SetStartBlockEvent.OutputObject
    >;
    SetStartBlock: TypedContractEvent<
      SetStartBlockEvent.InputTuple,
      SetStartBlockEvent.OutputTuple,
      SetStartBlockEvent.OutputObject
    >;

    "UnpauseClaim()": TypedContractEvent<
      UnpauseClaimEvent.InputTuple,
      UnpauseClaimEvent.OutputTuple,
      UnpauseClaimEvent.OutputObject
    >;
    UnpauseClaim: TypedContractEvent<
      UnpauseClaimEvent.InputTuple,
      UnpauseClaimEvent.OutputTuple,
      UnpauseClaimEvent.OutputObject
    >;

    "UnpauseWithdraw()": TypedContractEvent<
      UnpauseWithdrawEvent.InputTuple,
      UnpauseWithdrawEvent.OutputTuple,
      UnpauseWithdrawEvent.OutputObject
    >;
    UnpauseWithdraw: TypedContractEvent<
      UnpauseWithdrawEvent.InputTuple,
      UnpauseWithdrawEvent.OutputTuple,
      UnpauseWithdrawEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdatePool(uint256,uint256,uint256)": TypedContractEvent<
      UpdatePoolEvent.InputTuple,
      UpdatePoolEvent.OutputTuple,
      UpdatePoolEvent.OutputObject
    >;
    UpdatePool: TypedContractEvent<
      UpdatePoolEvent.InputTuple,
      UpdatePoolEvent.OutputTuple,
      UpdatePoolEvent.OutputObject
    >;

    "UpdatePoolInfo(uint256,uint256,uint256)": TypedContractEvent<
      UpdatePoolInfoEvent.InputTuple,
      UpdatePoolInfoEvent.OutputTuple,
      UpdatePoolInfoEvent.OutputObject
    >;
    UpdatePoolInfo: TypedContractEvent<
      UpdatePoolInfoEvent.InputTuple,
      UpdatePoolInfoEvent.OutputTuple,
      UpdatePoolInfoEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
